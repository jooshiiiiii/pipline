name: Java CI/CD Pipeline (Maven)

on:
  push:
    branches: [ "main" ]  # Runs when you push to main branch
  pull_request:
    branches: [ "main" ]  # Runs for PRs to main branch
  workflow_dispatch:      # Allows manual trigger of the workflow

jobs:
  ########################################
  # Build and Test Job
  ########################################
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code (use v4 for latest security features)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Java (JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven' # Cache Maven dependencies for faster builds

      # Step 3: Clean, Build, and Package the project
      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      # Step 4: Run unit and integration tests
      - name: Run tests
        run: mvn test

      # Step 5: Upload the final JAR artifact for deployment
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app-artifact
          # Specify the path to your packaged JAR file
          path: target/*.jar
          retention-days: 7

  ########################################
  # Deploy Job
  ########################################
  deploy:
    # This job only runs if the 'build' job succeeded
    needs: build
    runs-on: ubuntu-latest
    # Only deploy when pushing directly to the 'main' branch
    if: github.ref == 'refs/heads/main'

    steps:
      # Step 1: Download the artifact built in the previous job
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app-artifact
          path: ./deployment_artifact # The JAR file will be downloaded here (e.g., ./deployment_artifact/my-app.jar)

      # Step 2: Deploy and restart service via SSH/SCP
      - name: Deploy JAR and restart service
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          # Use SCP feature to securely transfer the file
          source: "./deployment_artifact/*.jar"
          # Target path on the server where the JAR should be copied (e.g., Tomcat webapps)
          target: "/var/www/myapp/"
          
          # Script to execute *after* file transfer completes
          script: |
            echo "File transfer complete. Restarting application service..."
            # Replace 'tomcat' with your actual service name (e.g., 'java-app', 'jetty')
            sudo systemctl restart tomcat
            echo "Deployment finished and service restarted."
